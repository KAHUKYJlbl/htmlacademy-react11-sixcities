{"version":3,"file":"static/js/674.2ca5000d.chunk.js","mappings":"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","sources":["components/login-form/login-form.tsx","components/random-location/random-location.tsx","pages/login/login.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { toast } from 'react-toastify';\n\nimport { useAppDispatch } from '../../hooks/store-hooks/use -app-dispatch';\nimport { useAppSelector } from '../../hooks/store-hooks/use-app-selector';\nimport LoadingSpinner from '../loading-spinner/loading-spinner';\nimport { getUserLoadingStatus } from '../../store/user/selectors';\nimport { login } from '../../store/user/api-actions';\nimport { FetchStatus } from '../../const';\n\ntype FormInputData = {\n  label: string;\n  value: string;\n  regexp: RegExp;\n  isError: boolean;\n  errorMessage: string;\n}\n\nconst formInitialState = {\n  email: {\n    label: 'E-mail',\n    value: '',\n    regexp: /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/,\n    isError: false,\n    errorMessage: 'E-mail: valid e-mail required'\n  },\n  password: {\n    label: 'Password',\n    value: '',\n    regexp: /^(?=.*[0-9])(?=.*[a-zA-Z]).{2,}$/,\n    isError: false,\n    errorMessage: 'Password: at least one digit and one letter required'\n  },\n};\n\nexport default function LoginForm (): JSX.Element {\n  const isLoading = useAppSelector(getUserLoadingStatus) === FetchStatus.Pending;\n  const dispatch = useAppDispatch();\n  const [formData, setFormData] = useState < Record<string, FormInputData> > (formInitialState);\n\n  const handleFormDataChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const {name, value} = evt.target;\n\n    setFormData({\n      ...formData,\n      [name]: {\n        ...formData[name],\n        isError: !formData[name].regexp.test(value),\n        value: value,\n      }\n    });\n  };\n\n  const handleFormSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    if (!formData.email.isError && !formData.password.isError) {\n      dispatch(login({\n        email: formData.email.value,\n        password: formData.password.value,\n      }));\n    } else {\n      formData.email.isError && toast.error(formData.email.errorMessage, {position: toast.POSITION.BOTTOM_RIGHT});\n      formData.password.isError && toast.error(formData.password.errorMessage, {position: toast.POSITION.BOTTOM_RIGHT});\n    }\n  };\n\n  return (\n    <section className=\"login\">\n      <h1 className=\"login__title\">Sign in</h1>\n      <form\n        className=\"login__form form\"\n        action=\"#\"\n        method=\"post\"\n        onSubmit={handleFormSubmit}\n      >\n        {Object.keys(formData).map((input) => {\n          const {label, value} = formData[input];\n          return (\n            <div key={input} className=\"login__input-wrapper form__input-wrapper\">\n              <label className=\"visually-hidden\">{label}</label>\n              <input\n                className=\"login__input form__input\"\n                type={input}\n                name={input}\n                placeholder={label}\n                required\n                value={value}\n                onChange={handleFormDataChange}\n              />\n            </div>\n          );\n        })}\n        <button\n          className=\"login__submit form__submit button\"\n          type=\"submit\"\n        >\n          {isLoading ? <LoadingSpinner spinnerType='button' /> : 'Sign in'}\n        </button>\n      </form>\n    </section>\n  );\n}\n","import { useAppDispatch } from '../../hooks/store-hooks/use -app-dispatch';\nimport { Link } from 'react-router-dom';\n\nimport { AppRoute, Cities } from '../../const';\nimport { changeCurrentCity } from '../../store/app/app-slice';\n\nexport default function RandomLocation (): JSX.Element {\n  const dispatch = useAppDispatch();\n\n  const randomCity = Object.values(Cities)[Math.floor(Math.random() * Object.values(Cities).length)];\n  return (\n    <section className=\"locations locations--login locations--current\">\n      <div className=\"locations__item\" onClick={() => dispatch(changeCurrentCity(randomCity))}>\n        <Link className=\"locations__item-link\" to={AppRoute.Main}>\n          <span>{randomCity}</span>\n        </Link>\n      </div>\n    </section>\n  );\n}\n","import { useAppSelector } from '../../hooks/store-hooks/use-app-selector';\n\nimport Layout from '../../components/layout/layout';\nimport LoginForm from '../../components/login-form/login-form';\nimport RandomLocation from '../../components/random-location/random-location';\nimport { getAuthStatus } from '../../store/user/selectors';\nimport browserHistory from '../../services/browser-history';\n\nexport default function Login() {\n  const authStatus = useAppSelector(getAuthStatus);\n\n  if (authStatus.auth) {\n    // return <Navigate to={AppRoute.Main} />;\n    browserHistory.back();\n  }\n\n  return (\n    <Layout wrapperClasses={['page--gray', 'page--login']}>\n      <main className=\"page__main page__main--login\">\n        <div className=\"page__login-container container\">\n          <LoginForm />\n          <RandomLocation />\n        </div>\n      </main>\n    </Layout>\n  );\n}\n"],"names":["formInitialState","email","label","value","regexp","isError","errorMessage","password","LoginForm","isLoading","useAppSelector","getUserLoadingStatus","FetchStatus","dispatch","useAppDispatch","_useState","useState","_useState2","_slicedToArray","formData","setFormData","handleFormDataChange","evt","_evt$target","target","name","_objectSpread","_defineProperty","test","_jsxs","className","children","_jsx","action","method","onSubmit","preventDefault","toast","position","login","Object","keys","map","input","_formData$input","type","placeholder","required","onChange","LoadingSpinner","spinnerType","RandomLocation","randomCity","values","Cities","Math","floor","random","length","onClick","changeCurrentCity","Link","to","AppRoute","Login","getAuthStatus","auth","browserHistory","Layout","wrapperClasses"],"sourceRoot":""}